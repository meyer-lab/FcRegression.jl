pipeline {
  agent { label 'docker' }
  options {
    timeout(time: 1, unit: 'HOURS')
    parallelsAlwaysFailFast()
  }
  stages {
    stage('Clean') { steps { sh 'git reset --hard && git clean -ffdx' } }
    stage('Test') {
      steps {
        sh 'julia --code-coverage=user -e \'using Pkg; Pkg.activate("."); Pkg.test("FcgR"; coverage=true)\''
        sh 'julia -e \'using Pkg; Pkg.add("Coverage"); using Coverage; coverage = process_folder(); LCOV.writefile("coverage-lcov.info", coverage)\''
        sh 'pip3 install --user lcov_cobertura'
        sh 'python3 ~/.local/lib/python3.7/site-packages/lcov_cobertura.py coverage-lcov.info -o coverage.cob'
        cobertura autoUpdateHealth: false, autoUpdateStability: false, coberturaReportFile: 'coverage.cob', enableNewApi: true, failUnhealthy: false, failUnstable: false, maxNumberOfBuilds: 0, onlyStable: false, sourceEncoding: 'ASCII', zoomCoverageChart: false
      }
    }
    stage('Build Notebooks') {
      steps {
        sh 'julia -e \'using Pkg; Pkg.add("Weave"); using Weave; weave("./translation.jmd", out_path=:pwd, doctype="md2pdf")\''
        sh 'julia -e \'using Pkg; Pkg.add("Weave"); using Weave; weave("./depletion.jmd", out_path=:pwd, doctype="md2pdf")\''
        archiveArtifacts artifacts: 'reports/*.*', onlyIfSuccessful: true
      }
    }
  }
  post {
    always {
      cleanWs cleanWhenFailure: false, cleanWhenNotBuilt: false, cleanWhenUnstable: false
    }
  }
}
